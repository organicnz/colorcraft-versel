---
description: 
globs: 
alwaysApply: true
---
# Cursor IDE Rules for Furniture Painter Website

## Project Architecture

### Technology Stack
- Next.js 15 App Router for modern React architecture
- Supabase for authentication and database
- TailwindCSS for styling
- Shadcn UI for component library
- React Hook Form + Zod for form validation
- Zustand for state management
- Resend for email notifications

### Initial Setup
```bash
# Initialize project
pnpm create next-app@latest furniture-painter --typescript --eslint --app --tailwind --src-dir

# Navigate to project
cd furniture-painter

# Install core dependencies
pnpm add @supabase/supabase-js @supabase/auth-helpers-nextjs resend zod react-hook-form @tanstack/react-query @uploadthing/react uploadthing zustand date-fns react-datepicker @radix-ui/react-dialog

# UI components
pnpm add class-variance-authority clsx tailwind-merge lucide-react @shadcn/ui

# Development dependencies
pnpm add -D @types/node @types/react @types/react-dom typescript eslint eslint-config-next prettier prettier-plugin-tailwindcss @types/react-datepicker
```

## Color Palette and Design System

### Color Palette
```typescript
// src/styles/colors.ts
export const colors = {
  // Primary colors - warm wood tones
  primary: {
    50: '#FAF5F0',
    100: '#F5EAE0',
    200: '#EAD5C0',
    300: '#DFBFA0',
    400: '#D4AA80',
    500: '#C99460', // Primary brand color
    600: '#B87940',
    700: '#96632F',
    800: '#744C21',
    900: '#523615',
  },
  // Secondary colors - complementary blues
  secondary: {
    50: '#EFF6FF',
    100: '#DBEAFE',
    200: '#BFDBFE',
    300: '#93C5FD',
    400: '#60A5FA',
    500: '#3B82F6', // Accent color
    600: '#2563EB',
    700: '#1D4ED8',
    800: '#1E40AF',
    900: '#1E3A8A',
  },
  // Neutral tones
  neutral: {
    50: '#F9FAFB',
    100: '#F3F4F6',
    200: '#E5E7EB',
    300: '#D1D5DB',
    400: '#9CA3AF',
    500: '#6B7280',
    600: '#4B5563',
    700: '#374151',
    800: '#1F2937',
    900: '#111827',
  },
  // Success, warning, danger colors
  success: '#10B981',
  warning: '#FBBF24',
  danger: '#EF4444',
}
```

### Tailwind Configuration
```typescript
// tailwind.config.ts
import type { Config } from 'tailwindcss'
import { colors } from './src/styles/colors'

const config: Config = {
  darkMode: ["class"],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        ...colors,
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: colors.primary[500],
          foreground: "hsl(var(--primary-foreground))",
          ...colors.primary
        },
        secondary: {
          DEFAULT: colors.secondary[500],
          foreground: "hsl(var(--secondary-foreground))",
          ...colors.secondary
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      fontFamily: {
        sans: ['var(--font-sans)'],
        serif: ['var(--font-serif)'],
        display: ['var(--font-display)'],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
}

export default config
```

## Database Schema

### Tables Structure
```sql
-- Supabase SQL Schema

-- Users table (extends Supabase auth.users)
create table public.users (
  id uuid references auth.users not null primary key,
  email text not null,
  full_name text,
  avatar_url text,
  role text not null default 'customer',
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null,
  constraint role_check check (role in ('admin', 'customer'))
);

-- Portfolio projects
create table public.projects (
  id uuid default uuid_generate_v4() primary key,
  title text not null,
  description text,
  brief_description text not null,
  before_images text[] not null,
  after_images text[] not null,
  techniques text[],
  materials text[],
  completion_date date,
  client_name text,
  client_testimonial text,
  is_featured boolean default false,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- Customers (CRM)
create table public.customers (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references public.users(id),
  full_name text not null,
  email text not null,
  phone text,
  address text,
  notes text,
  customer_since timestamp with time zone default now() not null,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- Services
create table public.services (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  description text not null,
  brief_description text not null,
  image_url text,
  price_range text,
  is_active boolean default true,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- Inquiries/Quotes
create table public.inquiries (
  id uuid default uuid_generate_v4() primary key,
  customer_id uuid references public.customers(id),
  service_id uuid references public.services(id),
  status text not null default 'pending',
  description text not null,
  furniture_type text not null,
  furniture_dimensions text,
  furniture_images text[],
  preferred_timeline text,
  budget_range text,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null,
  constraint status_check check (status in ('pending', 'quoted', 'accepted', 'declined', 'completed'))
);

-- Projects (CRM client projects, not portfolio)
create table public.client_projects (
  id uuid default uuid_generate_v4() primary key,
  customer_id uuid references public.customers(id) not null,
  inquiry_id uuid references public.inquiries(id),
  title text not null,
  description text,
  status text not null default 'planning',
  start_date date,
  deadline date,
  completion_date date,
  price numeric(10,2),
  deposit_amount numeric(10,2),
  deposit_paid boolean default false,
  final_paid boolean default false,
  progress_images text[],
  progress_notes text[],
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null,
  constraint status_check check (status in ('planning', 'in_progress', 'completed', 'cancelled'))
);

-- Site content for admin editing
create table public.site_content (
  id text primary key,
  title text not null,
  content jsonb not null,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- Row Level Security Policies
alter table public.users enable row level security;
alter table public.projects enable row level security;
alter table public.customers enable row level security;
alter table public.services enable row level security;
alter table public.inquiries enable row level security;
alter table public.client_projects enable row level security;
alter table public.site_content enable row level security;

-- Users policies
create policy "Public users are viewable by everyone."
  on users for select
  using (true);

create policy "Users can update own record."
  on users for update
  using (auth.uid() = id);

-- Projects policies
create policy "Projects are viewable by everyone."
  on projects for select
  using (true);

create policy "Only admins can insert projects."
  on projects for insert
  using (
    exists (
      select 1 from users
      where users.id = auth.uid() and users.role = 'admin'
    )
  );

create policy "Only admins can update projects."
  on projects for update
  using (
    exists (
      select 1 from users
      where users.id = auth.uid() and users.role = 'admin'
    )
  );

create policy "Only admins can delete projects."
  on projects for delete
  using (
    exists (
      select 1 from users
      where users.id = auth.uid() and users.role = 'admin'
    )
  );

-- Similar policies for other tables...
```

## Directory Structure

```
src/
├── app/                     # Next.js App Router 
│   ├── (auth)/              # Auth routes
│   │   ├── signin/          # Sign in page
│   │   ├── signup/          # Sign up page
│   │   └── reset-password/  # Password reset
│   ├── (marketing)/         # Public marketing pages
│   │   ├── page.tsx         # Homepage
│   │   ├── about/           # About page
│   │   ├── services/        # Services page
│   │   ├── portfolio/       # Portfolio page
│   │   └── contact/         # Contact page
│   ├── (dashboard)/         # Admin dashboard (protected)
│   │   ├── layout.tsx       # Dashboard layout
│   │   ├── page.tsx         # Dashboard home
│   │   ├── customers/       # CRM
│   │   ├── inquiries/       # Quote requests
│   │   ├── projects/        # Client projects
│   │   ├── portfolio/       # Portfolio management
│   │   └── settings/        # Site settings
│   ├── (account)/           # Customer account area
│   │   ├── layout.tsx       # Account layout
│   │   ├── page.tsx         # Account overview
│   │   ├── projects/        # Customer's projects
│   │   └── inquiries/       # Customer's inquiries
│   ├── api/                 # API routes
│   └── layout.tsx           # Root layout
├── components/              # Shared components
│   ├── ui/                  # UI components (shadcn)
│   ├── forms/               # Form components
│   ├── dashboard/           # Dashboard components
│   ├── marketing/           # Marketing components
│   ├── portfolio/           # Portfolio components
│   └── shared/              # Shared components
├── lib/                     # Utility functions
│   ├── supabase/            # Supabase client
│   ├── validators/          # Zod validators
│   ├── hooks/               # Custom React hooks
│   └── utils/               # Utility functions
├── types/                   # TypeScript types
├── styles/                  # Global styles
└── config/                  # Configuration
```

## Authentication and Authorization

### Supabase Auth Setup

```typescript
// src/lib/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'

export const createClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

```typescript
// src/lib/supabase/server.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export const createClient = () => {
  const cookieStore = cookies()
  
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get: (name) => cookieStore.get(name)?.value,
        set: (name, value, options) => {
          cookieStore.set(name, value, options)
        },
        remove: (name, options) => {
          cookieStore.set(name, '', { ...options, maxAge: 0 })
        }
      }
    }
  )
}
```

### Admin Authorization Middleware

```typescript
// src/middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'

export async function middleware(request: NextRequest) {
  const response = NextResponse.next()
  const supabase = createMiddlewareClient({ req: request, res: response })

  const {
    data: { session },
  } = await supabase.auth.getSession()
  
  // Protect dashboard routes
  if (!session && request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.redirect(new URL('/signin', request.url))
  }
  
  // If user is logged in, check if they're an admin for dashboard access
  if (session && request.nextUrl.pathname.startsWith('/dashboard')) {
    const { data: userData } = await supabase
      .from('users')
      .select('role')
      .eq('id', session.user.id)
      .single()
    
    if (!userData || userData.role !== 'admin') {
      return NextResponse.redirect(new URL('/account', request.url))
    }
  }
  
  // Protect account routes
  if (!session && request.nextUrl.pathname.startsWith('/account')) {
    return NextResponse.redirect(new URL('/signin', request.url))
  }
  
  return response
}

export const config = {
  matcher: ['/dashboard/:path*', '/account/:path*'],
}
```

## CRM Components

### Customer Management

```typescript
// src/components/dashboard/customers/CustomerForm.tsx
"use client"

import { z } from "zod"
import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { createClient } from "@/lib/supabase/client"

const customerSchema = z.object({
  full_name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  phone: z.string().optional(),
  address: z.string().optional(),
  notes: z.string().optional(),
})

type CustomerFormProps = {
  initialData?: z.infer<typeof customerSchema> & { id: string }
  onSuccess?: () => void
}

export default function CustomerForm({ initialData, onSuccess }: CustomerFormProps) {
  const [isLoading, setIsLoading] = useState(false)
  const supabase = createClient()
  
  const form = useForm<z.infer<typeof customerSchema>>({
    resolver: zodResolver(customerSchema),
    defaultValues: initialData || {
      full_name: "",
      email: "",
      phone: "",
      address: "",
      notes: "",
    },
  })
  
  async function onSubmit(values: z.infer<typeof customerSchema>) {
    setIsLoading(true)
    
    try {
      if (initialData?.id) {
        // Update existing customer
        await supabase
          .from("customers")
          .update(values)
          .eq("id", initialData.id)
      } else {
        // Create new customer
        await supabase
          .from("customers")
          .insert(values)
      }
      
      if (onSuccess) onSuccess()
    } catch (error) {
      console.error("Error saving customer:", error)
    } finally {
      setIsLoading(false)
    }
  }
  
  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <label htmlFor="full_name">Full Name *</label>
        <Input
          id="full_name"
          {...form.register("full_name")}
          error={form.formState.errors.full_name?.message}
        />
      </div>
      
      <div className="space-y-2">
        <label htmlFor="email">Email *</label>
        <Input
          id="email"
          type="email"
          {...form.register("email")}
          error={form.formState.errors.email?.message}
        />
      </div>
      
      <div className="space-y-2">
        <label htmlFor="phone">Phone</label>
        <Input
          id="phone"
          {...form.register("phone")}
          error={form.formState.errors.phone?.message}
        />
      </div>
      
      <div className="space-y-2">
        <label htmlFor="address">Address</label>
        <Input
          id="address"
          {...form.register("address")}
          error={form.formState.errors.address?.message}
        />
      </div>
      
      <div className="space-y-2">
        <label htmlFor="notes">Notes</label>
        <Textarea
          id="notes"
          {...form.register("notes")}
          error={form.formState.errors.notes?.message}
        />
      </div>
      
      <Button type="submit" disabled={isLoading}>
        {isLoading ? "Saving..." : initialData?.id ? "Update Customer" : "Add Customer"}
      </Button>
    </form>
  )
}
```

### Project Tracking

```typescript
// src/components/dashboard/projects/ProjectCard.tsx
import { formatDistance } from "date-fns"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ProjectStatus } from "@/types/crm"

type ProjectCardProps = {
  project: {
    id: string
    title: string
    description: string | null
    status: ProjectStatus
    customer: {
      full_name: string
    }
    start_date: string | null
    deadline: string | null
    price: number | null
  }
}

export default function ProjectCard({ project }: ProjectCardProps) {
  const statusColors = {
    planning: "bg-blue-100 text-blue-800",
    in_progress: "bg-amber-100 text-amber-800",
    completed: "bg-green-100 text-green-800",
    cancelled: "bg-red-100 text-red-800",
  }
  
  const statusText = {
    planning: "Planning",
    in_progress: "In Progress",
    completed: "Completed",
    cancelled: "Cancelled",
  }
  
  return (
    <Card className="h-full transition-all hover:shadow-md">
      <CardHeader className="pb-2">
        <div className="flex items-start justify-between">
          <CardTitle className="text-lg line-clamp-1">{project.title}</CardTitle>
          <Badge className={statusColors[project.status]}>
            {statusText[project.status]}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="pb-2">
        <p className="text-sm text-gray-500 mb-2">
          Client: {project.customer.full_name}
        </p>
        {project.description && (
          <p className="text-sm line-clamp-2">{project.description}</p>
        )}
      </CardContent>
      <CardFooter className="flex justify-between text-xs text-gray-500">
        <div>
          {project.deadline && (
            <span>
              Due: {formatDistance(new Date(project.deadline), new Date(), { addSuffix: true })}
            </span>
          )}
        </div>
        <div>
          {project.price && (
            <span className="font-medium">${project.price.toFixed(2)}</span>
          )}
        </div>
      </CardFooter>
    </Card>
  )
}
```

## Portfolio Management

### Project Upload

```typescript
// src/app/api/uploadthing/core.ts
import { createUploadthing, type FileRouter } from "uploadthing/next"
import { getServerSession } from "next-auth"

const f = createUploadthing()

export const ourFileRouter = {
  projectImage: f({ image: { maxFileSize: "4MB", maxFileCount: 10 } })
    .middleware(async () => {
      const session = await getServerSession()
      
      if (!session || !session.user) {
        throw new Error("Unauthorized")
      }
      
      // Get user from database to check if admin
      // ... code to fetch user and check role
      
      return { userId: session.user.id }
    })
    .onUploadComplete(async ({ metadata, file }) => {
      return { uploadedBy: metadata.userId, fileUrl: file.url }
    }),
} satisfies FileRouter

export type OurFileRouter = typeof ourFileRouter
```

### Portfolio Item Component

```typescript
// src/components/portfolio/PortfolioItem.tsx
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"

type PortfolioItemProps = {
  project: {
    id: string
    title: string
    brief_description: string
    after_images: string[]
    techniques: string[] | null
  }
}

export default function PortfolioItem({ project }: PortfolioItemProps) {
  // Get the first "after" image as the main display image
  const mainImage = project.after_images[0]
  
  return (
    <div className="group relative overflow-hidden rounded-lg transition-all hover:shadow-xl">
      <div className="aspect-square overflow-hidden">
        <Image
          src={mainImage}
          alt={project.title}
          width={500}
          height={500}
          className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </div>
      
      <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100">
        <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
          <h3 className="text-xl font-bold">{project.title}</h3>
          <p className="mt-1 line-clamp-2 text-sm text-gray-200">
            {project.brief_description}
          </p>
          
          {project.techniques && project.techniques.length > 0 && (
            <div className="mt-2 flex flex-wrap gap-1">
              {project.techniques.slice(0, 3).map((technique) => (
                <span 
                  key={technique} 
                  className="inline-block rounded-full bg-primary-600/40 px-2 py-0.5 text-xs"
                >
                  {technique}
                </span>
              ))}
            </div>
          )}
          
          <Link href={`/portfolio/${project.id}`} passHref>
            <Button 
              variant="outline" 
              size="sm" 
              className="mt-3 border-white text-white hover:bg-white hover:text-primary-700"
            >
              View Project
            </Button>
          </Link>
        </div>
      </div>
    </div>
  )
}
```

## Admin Content Management

### Editable Content Component

```typescript
// src/components/admin/EditableContent.tsx
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { createClient } from "@/lib/supabase/client"

type EditableContentProps = {
  id: string
  initialContent: {
    title: string
    content: string
  }
  onlyAdmin?: boolean
}

export default function EditableContent({ 
  id, 
  initialContent,
  onlyAdmin = true 
}: EditableContentProps) {
  const [isEditing, setIsEditing] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [content, setContent] = useState(initialContent)
  const supabase = createClient()
  
  const handleSave = async () => {
    setIsLoading(true)
    
    try {
      const { error } = await supabase
        .from("site_content")
        .upsert({
          id,
          title: content.title,
          content: { text: content.content },
        })
      
      if (error) throw error
      setIsEditing(false)
    } catch (error) {
      console.error("Error saving content:", error)
    } finally {
      setIsLoading(false)
    }
  }
  
  // If not in edit mode, just display the content
  if (!isEditing) {
    return (
      <div className="relative group">
        <div className="prose max-w-none">
          <h2>{content.title}</h2>
          <div dangerouslySetInnerHTML={{ __html: content.content }} />
        </div>
        
        {onlyAdmin && (
          <Button
            variant="outline"
            size="sm"
            className="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-opacity"
            onClick={() => setIsEditing(true)}
          >
            Edit
          </Button>
        )}
      </div>
    )
  }
  
  // Edit mode
  return (
    <div className="border rounded-md p-4 space-y-4">
      <div className="space-y-2">
        <label htmlFor="title" className="text-sm font-medium">
          Section Title
        </label>
        <Input
          id="title"
          value={content.title}
          onChange={(e) => setContent({ ...content, title: e.target.value })}
        />
      </div>
      
      <div className="space-y-2">
        <label htmlFor="content" className="text-sm font-medium">
          Content
        </label>
        <Textarea
          id="content"
          value={content.content}
          onChange={(e) => setContent({ ...content, content: e.target.value })}
          rows={6}
        />
        <p className="text-xs text-gray-500">
          You can use HTML tags for formatting.
        </p>
      </div>
      
      <div className="flex justify-end space-x-2">
        <Button
          variant="outline"
          onClick={() => {
            setContent(initialContent)
            setIsEditing(false)
          }}
        >
          Cancel
        </Button>
        <Button onClick={handleSave} disabled={isLoading}>
          {isLoading ? "Saving..." : "Save Changes"}
        </Button>
      </div>
    </div>
  )
}
```

## Data Fetching

### Server Component Data Fetching

```typescript
// src/app/portfolio/page.tsx
import { createClient } from "@/lib/supabase/server"
import PortfolioItem from "@/components/portfolio/PortfolioItem"
import { HeroSection } from "@/components/marketing/HeroSection"
import EditableContent from "@/components/admin/EditableContent"

export default async function PortfolioPage() {
  const supabase = createClient()
  
  // Fetch portfolio projects
  const { data: projects } = await supabase
    .from("projects")
    .select("*")
    .order("created_at", { ascending: false })
  
  // Fetch editable content
  const { data: content } = await supabase
    .from("site_content")
    .select("*")
    .eq("id", "portfolio_intro")
    .single()
    
  const portfolioContent = content || {
    id: "portfolio_intro",
    title: "Our Portfolio",
    content: {
      text: "<p>Browse through our collection of furniture transformation projects. Each piece tells a story of renewal and creativity.</p>"
    }
  }
  
  return (
    <div className="container py-12">
      <HeroSection
        title="Our Portfolio"
        description="Browse our collection of completed furniture transformations"
        imageSrc="/images/portfolio-hero.jpg"
      />
      
      <div className="my-12">
        <EditableContent
          id="portfolio_intro"
          initialContent={{
            title: portfolioContent.title,
            content: portfolioContent.content.text,
          }}
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projects?.map((project) => (
          <PortfolioItem key={project.id} project={project} />
        ))}
      </div>
    </div>
  )
}
```

### Client Component Data Fetching

```typescript
// src/components/dashboard/customers/CustomersTable.tsx
"use client"

import { useState, useEffect } from "react"
import { useQuery } from "@tanstack/react-query"
import { createClient } from "@/lib/supabase/client"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { CustomerType } from "@/types/crm"

export default function CustomersTable() {
  const [searchTerm, setSearchTerm] = useState("")
  const supabase = createClient()
  
  const fetchCustomers = async (): Promise<CustomerType[]> => {
    let query = supabase
      .from("customers")
      .select("*")
      .order("full_name", { ascending: true })
    
    if (searchTerm) {
      query = query.ilike("full_name", `%${searchTerm}%`)
    }
    
    const { data, error } = await query
    
    if (error) throw new Error(error.message)
    return data || []
  }
  
  const { data: customers, isLoading, refetch } = useQuery({
    queryKey: ["customers", searchTerm],
    queryFn: fetchCustomers,
  })
  
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">Customers</h2>
        <div className="flex gap-2">
          <Input
            placeholder="Search customers..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="max-w-xs"
          />
          <Button variant="outline" onClick={() => refetch()}>
            Refresh
          </Button>
          <Button>Add Customer</Button>
        </div>
      </div>
      
      {isLoading ? (
        <div className="text-center py-8">Loading customers...</div>
      ) : customers?.length === 0 ? (
        <div className="text-center py-8">No customers found</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b">
                <th className="px-4 py-2 text-left">Name</th>
                <th className="px-4 py-2 text-left">Email</th>
                <th className="px-4 py-2 text-left">Phone</th>
                <th className="px-4 py-2 text-left">Customer Since</th>
                <th className="px-4 py-2 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {customers?.map((customer) => (
                <tr key={customer.id} className="border-b hover:bg-gray-50">
                  <td className="px-4 py-2">{customer.full_name}</td>
                  <td className="px-4 py-2">{customer.email}</td>
                  <td className="px-4 py-2">{customer.phone || "-"}</td>
                  <td className="px-4 py-2">
                    {new Date(customer.customer_since).toLocaleDateString()}
                  </td>
                  <td className="px-4 py-2">
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        View
                      </Button>
                      <Button variant="outline" size="sm">
                        Edit
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  )
}
```

## Dashboard UI

### Dashboard Layout

```typescript
// src/app/(dashboard)/layout.tsx
import { redirect } from "next/navigation"
import { createClient } from "@/lib/supabase/server"
import DashboardNav from "@/components/dashboard/DashboardNav"
import DashboardHeader from "@/components/dashboard/DashboardHeader"

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const supabase = createClient()
  
  // Check if user is logged in and is admin
  const { data: { session } } = await supabase.auth.getSession()
  
  if (!session) {
    redirect("/signin")
  }
  
  // Verify user is an admin
  const { data: user } = await supabase
    .from("users")
    .select("role")
    .eq("id", session.user.id)
    .single()
  
  if (!user || user.role !== "admin") {
    redirect("/account")
  }
  
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader user={session.user} />
      <div className="flex flex-1">
        <DashboardNav />
        <main className="flex-1 p-6 overflow-auto">
          {children}
        </main>
      </div>
    </div>
  )
}
```

## Environment Variables

Create a `.env.local` file (added to .gitignore) with:

```
# Supabase
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# Uploadthing
UPLOADTHING_SECRET=your_uploadthing_secret
UPLOADTHING_APP_ID=your_uploadthing_app_id

# Resend (for email notifications)
RESEND_API_KEY=your_resend_api_key

# Site URL
NEXT_PUBLIC_SITE_URL=http://localhost:3000
```

## Deployment Best Practices

1. Use Vercel for hosting
2. Configure environment variables in Vercel dashboard
3. Set up preview deployments for PRs
4. Configure domain settings with proper redirects
5. Enable automated backups of Supabase data
6. Set up monitoring and error tracking (e.g., Sentry)
7. Configure proper CORS settings in Supabase

## Security Considerations

1. Implement strict RLS policies in Supabase
2. Use middleware for route protection
3. Store credentials securely using environment variables
4. Validate all user inputs using Zod
5. Implement rate limiting for API endpoints
6. Use HTTPS only
7. Enable Multi-Factor Authentication for admin accounts
8. Regular security audits of permissions 